{
	"info": {
		"_postman_id": "71500936-27f1-4b33-af7b-c74cd995d824",
		"name": "VAD",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "18776522"
	},
	"item": [
		{
			"name": "home/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Inference-200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    response_text = pm.response.text()\r",
							"    pm.expect(pm.response.text()).to.include(\"VAD Model Inference\");\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"// pm.response.to.be.html;\r",
							"\r",
							"\r",
							"  \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": "localhost:8004/"
			},
			"response": []
		},
		{
			"name": "inference/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Inference-200 OK\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let idValue = jsonData.id;\r",
							"\r",
							"    // Define a regular expression pattern for UUID4 format\r",
							"    var uuid4Pattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(idValue).to.match(uuid4Pattern);\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.be.ok;\r",
							"    pm.globals.set(\"task_id_value\", idValue);\r",
							"\r",
							"    // you can also use global, collection, and session variables\r",
							"    // you can also set local variables which are available throughout a collection run\r",
							"    // pm.variables.set(\"exampleLocalVariable\", \"this-example-of-a-local-variable\");\r",
							"    // pm.environment.set(\"task_id\", idValue);\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "wave_paths",
							"value": "a.wav",
							"type": "text"
						},
						{
							"key": "model_label",
							"value": "9a23284b-8ceb-414b-a033-c3c0b980f44a-epoch=15",
							"type": "text"
						}
					]
				},
				"url": "localhost:8004/inference"
			},
			"response": []
		},
		{
			"name": "inference/ - bad arguments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Wrong arguments\", function () {\r",
							"    // let expected = {\"detail\":[{\"loc\":[\"body\",\"wave_paths\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"},{\"loc\":[\"body\",\"model_label\"],\"msg\":\"field required\",\"type\":\"value_error.missing\"}]};\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.detail[0].loc[1]).to.be.equal('wave_paths')\r",
							"    pm.expect(jsonData.detail[1].loc[1]).to.be.equal('model_label')\r",
							"    pm.expect(jsonData.detail[0].type).to.be.equal('value_error.missing')\r",
							"    pm.expect(jsonData.detail[1].type).to.be.equal('value_error.missing')\r",
							"    \r",
							"    \r",
							"    \r",
							"    // pm.response.to.have.status(422);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "wave_path",
							"value": "a.wav",
							"type": "text"
						},
						{
							"key": "model_labe",
							"value": "9a23284b-8ceb-414b-a033-c3c0b980f44a-epoch=15",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:8004/inference",
					"host": [
						"localhost"
					],
					"port": "8004",
					"path": [
						"inference"
					],
					"query": [
						{
							"key": "sdfsdf",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "inference/ - missing audio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Missing audio file\", function () {\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.detail[0].msg).to.be.equal('All file paths could not be resolved')\r",
							"    pm.expect(jsonData.detail[0].type).to.be.equal('FileNotFoundError')\r",
							"    \r",
							"\r",
							"    pm.expect(jsonData).to.have.property('detail');\r",
							"    pm.response.to.have.status(422);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "wave_paths",
							"value": "missing.wav",
							"type": "text"
						},
						{
							"key": "model_label",
							"value": "9a23284b-8ceb-414b-a033-c3c0b980f44a-epoch=15",
							"type": "text"
						}
					]
				},
				"url": "localhost:8004/inference"
			},
			"response": []
		},
		{
			"name": "inference/ - missing audio partial",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Missing audio file\", function () {\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.warning).to.be.equal('Some file paths could not be resolved. Task will proceed with remaining valid files.')\r",
							"    pm.expect(jsonData.files_ok[0]).to.be.equal(\"/usr/src/app/vol_mount/a.wav\")\r",
							"    pm.expect(jsonData.files_affected[0]).to.be.equal(\"/usr/src/app/vol_mount/missing.wav\")\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// {\r",
							"//     \"id\": \"4c814c6e-f06c-48d9-95e8-42aa74b11d2b\",\r",
							"//     \"warning\": \"Some file paths could not be resolved. Task will proceed with remaining valid files.\",\r",
							"//     \"files_ok\": [\r",
							"//         \"/usr/src/app/vol_mount/a.wav\"\r",
							"//     ],\r",
							"//     \"files_affected\": [\r",
							"//         \"/usr/src/app/vol_mount/missing.wav\"\r",
							"//     ]\r",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "wave_paths",
							"value": "a.wav, missing.wav",
							"type": "text"
						},
						{
							"key": "model_label",
							"value": "9a23284b-8ceb-414b-a033-c3c0b980f44a-epoch=15",
							"type": "text"
						}
					]
				},
				"url": "localhost:8004/inference"
			},
			"response": []
		},
		{
			"name": "inference/ - missing model_label",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Missing model label\", function () {\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.detail[0].msg).to.contain('not found in config YAML.')\r",
							"    pm.expect(jsonData.detail[0].type).to.be.equal('<class \\'KeyError\\'>')\r",
							"    \r",
							"    pm.response.to.have.status(500);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "wave_paths",
							"value": "a.wav",
							"type": "text"
						},
						{
							"key": "model_label",
							"value": "wrong_model_label_0123",
							"type": "text"
						}
					]
				},
				"url": "localhost:8004/inference"
			},
			"response": []
		},
		{
			"name": "task/:task_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"get task id\", function () {\r",
							"    // make an assertion\r",
							"    // if assertion throws error, your test will fail\r",
							"    task_id_value = pm.environment.get(\"task_id_value\");\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    let idValue = jsonData.id;\r",
							"\r",
							"    pm.expect(idValue).to.equal(task_id_value);\r",
							"});\r",
							"\r",
							"    // pm.expect(jsonData).to.have.property('id');\r",
							"    // pm.expect(idValue).to.match(uuid4Pattern);\r",
							"    // pm.response.to.have.status(200);\r",
							"    // pm.response.to.be.json;\r",
							"    // pm.response.to.be.ok;\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "localhost:8004/task/:task_id",
					"host": [
						"localhost"
					],
					"port": "8004",
					"path": [
						"task",
						":task_id"
					],
					"variable": [
						{
							"key": "task_id",
							"value": "{{task_id_value}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task/:task_id - bad task id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"bad task id\", function () {\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.detail[0].type).to.be.equal('ValueError');\r",
							"    pm.response.to.have.status(422);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "localhost:8004/task/:task_id",
					"host": [
						"localhost"
					],
					"port": "8004",
					"path": [
						"task",
						":task_id"
					],
					"variable": [
						{
							"key": "task_id",
							"value": "wrong_task_id"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "all_tasks/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"all tasks\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.response.to.have.status(200)\r",
							"\r",
							"    // Define a regular expression pattern for UUID4 format\r",
							"    let uuid4Pattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\r",
							"\r",
							"    for (let key in jsonData) {\r",
							"        if (jsonData.hasOwnProperty(key)) {\r",
							"            pm.expect(key).to.match(uuid4Pattern);\r",
							"        }\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8004/all_tasks"
			},
			"response": []
		}
	]
}